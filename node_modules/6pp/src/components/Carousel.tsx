import { MouseEvent, useCallback, useEffect, useRef, useState } from "react";
import {
  MyntraCarouselPropsType,
  SliderProps,
  StylishCarouselProps,
} from "../types/components.types";
import * as React from "react";

const MyntraCarousel = ({
  images,
  darkMode = false,
  objectFit = "cover",
  setIsOpen,
  PrevButton,
  NextButton,
}: MyntraCarouselPropsType) => {
  const [activeImage, setActiveImage] = useState<number>(0);
  const containerRef = useRef<HTMLDivElement | null>(null);
  const imageRef = useRef<HTMLImageElement | null>(null);

  const border = darkMode ? "1px solid #fff" : "1px solid black";

  const incrementHandler = () => {
    if (activeImage === images.length - 1) setActiveImage(0);
    else setActiveImage((prev) => prev + 1);
  };
  const decrementHandler = () => {
    if (activeImage === 0) setActiveImage(images.length - 1);
    else setActiveImage((prev) => prev - 1);
  };

  const mouseMoveHandler = useCallback((e: globalThis.MouseEvent) => {
    const y = e.clientY;
    containerRef.current?.scrollTo({ top: y });
  }, []);

  const closeHandler = (
    e: MouseEvent<HTMLDialogElement, globalThis.MouseEvent>
  ) => {
    if (!containerRef.current) return;

    const containerDimension = containerRef.current.getBoundingClientRect();

    if (
      e.clientX < containerDimension.left ||
      e.clientX > containerDimension.right ||
      e.clientY < containerDimension.top ||
      e.clientY > containerDimension.bottom
    )
      setIsOpen(false);
  };

  useEffect(() => {
    if (containerRef.current)
      containerRef.current.addEventListener("mousemove", mouseMoveHandler);

    return () => {
      if (containerRef.current)
        containerRef.current.removeEventListener("mousemove", mouseMoveHandler);
    };
  }, []);

  const ImagesList = (
    <aside
      style={{
        display: "flex",
        flexDirection: "column",
        gap: "1rem",
        position: "absolute",
        top: "1rem",
        left: "1rem",
      }}
    >
      {images.map((i, idx) => (
        <button
          key={idx}
          style={{
            border: idx === activeImage ? border : "1px solid rgba(0,0,0,0.3)",
            outline: "none",
            backgroundColor: "transparent",
            width: "fit-content",
            height: "unset",
            cursor: "pointer",
          }}
          onClick={() => setActiveImage(idx)}
        >
          <img
            style={{
              width: "2rem",
              height: "2.5rem",
              objectFit: "contain",
            }}
            src={i}
            alt="Image"
          />
        </button>
      ))}
    </aside>
  );

  const NavigationButton = (
    <article
      style={{
        display: "flex",
        width: "95%",
        justifyContent: "space-between",
        alignItems: "center",
        position: "absolute",
        top: "50%",
        left: "50%",
        transform: "translate(-50%,-50%)",
      }}
    >
      <PrevButton onClick={decrementHandler} />
      <NextButton onClick={incrementHandler} />
    </article>
  );

  return (
    <section
      style={{
        width: "100vw",
        height: "100vh",
        backgroundColor: "rgba(0,0,0,0.7)",
        position: "fixed",
        top: 0,
        left: 0,
        zIndex: 200,
      }}
      onClick={closeHandler}
    >
      <div
        style={{
          width: "100%",
          maxWidth: "950px",
          height: "100vh",
          position: "relative",
          margin: "auto",
          boxShadow: darkMode ? "0 0 5px black" : "0 0 5px white",
          overflow: "auto",
          cursor: "s-resize",
          scrollbarWidth: "none",
          backgroundColor: darkMode ? "black" : "#fff",
        }}
        ref={containerRef}
      >
        <img
          ref={imageRef}
          src={images[activeImage]}
          style={{
            width: "100%",
            minHeight: "100vh",
            objectFit,
          }}
        />
        <div
          style={{
            position: "fixed",
            top: 0,
            width: "95%",
            maxWidth: "950px",
            height: "100vh",
          }}
        >
          {ImagesList}
          {NavigationButton}
        </div>
      </div>
    </section>
  );
};

const StylishCarousel = ({
  imageSize = ["100%", "80vw", "25rem", "30rem"],
  images = [],
  objectFit = "cover",
  imageBg = "transparent",
  sideImageSize = ["3rem", "3.5rem", "4rem", "5rem"],
}: StylishCarouselProps) => {
  if (images.length === 0)
    throw new Error("imageSize should not be more than 4");

  if (imageSize.length > 5)
    throw new Error("imageSize should not be more than 4");

  const [activeImage, setActiveImage] = useState(0);

  const [currentWidth, setCurrentWidth] = useState("");
  const [sideImageWidth, setSideImageWidth] = useState("");

  const resizeHandler = useCallback(() => {
    const width = window.screen.width;
    if (width < 480) {
      setCurrentWidth(imageSize[0]);
      setSideImageWidth(sideImageSize[0]);
    } else if (width < 768 && imageSize.length >= 3) {
      setCurrentWidth(imageSize[1]);
      setSideImageWidth(sideImageSize[1]);
    } else if (width < 992 && imageSize.length >= 4) {
      setCurrentWidth(imageSize[2]);
      setSideImageWidth(sideImageSize[2]);
    } else if (width < 1280 && imageSize.length >= 5) {
      setCurrentWidth(imageSize[3]);
      setSideImageWidth(sideImageSize[3]);
    } else {
      setCurrentWidth(imageSize[imageSize.length - 1]);
      setSideImageWidth(sideImageSize[sideImageSize.length - 1]);
    }
  }, []);

  useEffect(() => {
    resizeHandler();
    window.addEventListener("resize", resizeHandler);

    return () => {
      window.removeEventListener("resize", resizeHandler);
    };
  }, []);

  return (
    <div
      style={{
        width: "fit-content",
        display: "flex",
        gap: "1rem",
        padding: "1rem",
      }}
    >
      <aside
        style={{
          display: "flex",
          flexDirection: "column",
          width: "fit-content",
          gap: "1rem",
        }}
      >
        {images.map((i, index) => (
          <img
            key={index}
            style={{
              width: sideImageWidth,
              height: sideImageWidth,
              borderRadius: "0.25rem",
              objectFit,
              border: "1px solid  rgba(0,0,0,0.3)",
            }}
            src={i}
            alt={`Image-${index}`}
            onMouseOver={() => setActiveImage(index)}
          />
        ))}
      </aside>
      <section
        style={{
          width: currentWidth,
          height: currentWidth,
          overflow: "hidden",
          scrollbarWidth: "none",
          display: "flex",
          alignItems: "center",
          borderRadius: "0.5rem",
          backgroundColor: imageBg,
        }}
      >
        {images.map((i, index) => (
          <img
            key={index}
            style={{
              width: currentWidth,
              height: currentWidth,
              objectFit: "contain",
              aspectRatio: "1/1",
              borderRadius: "0.5rem",
              transition: "all 0.3s",
              transform: `translateX(-${activeImage * 100}%)`,
            }}
            src={i}
            alt={`Photo-${index}`}
          />
        ))}
      </section>
    </div>
  );
};

const Slider = ({
  images,
  objectFit = "cover",
  PrevIcon,
  NextIcon,
  bgColor = "inherit",
  showNav = true,
  showDots,
  showThumbnails,
  autoplay,
  autoplayDuration = 4000,
  onClick,
}: SliderProps) => {
  const [activeImage, setActiveImage] = useState<number>(0);

  const incrementHandler = () => {
    setActiveImage((prev) => {
      if (prev === images.length - 1) return 0;
      return prev + 1;
    });
  };
  const decrementHandler = () => {
    setActiveImage((prev) => {
      if (prev === 0) return images.length - 1;
      return prev - 1;
    });
  };

  useEffect(() => {
    let intervalId: number;
    if (autoplay) {
      intervalId = setInterval(() => {
        incrementHandler();
      }, autoplayDuration);
    }
    return () => {
      if (intervalId) clearInterval(intervalId);
    };
  }, []);

  const NavigationButton = (
    <article
      style={{
        padding: "1rem",
        position: "absolute",
        display: "flex",
        alignItems: "center",
        justifyContent: "space-between",
        width: "100%",
        top: "50%",
        transform: "translateY(-50%)",
      }}
    >
      <button
        style={{
          border: "none",
          backgroundColor: "transparent",
          cursor: "pointer",
          outline: "none",
        }}
        onClick={decrementHandler}
      >
        {PrevIcon || "Prev"}
      </button>
      <button
        style={{
          border: "none",
          backgroundColor: "transparent",
          cursor: "pointer",
          outline: "none",
        }}
        onClick={incrementHandler}
      >
        {NextIcon || "Next"}
      </button>
    </article>
  );

  const Dots = (
    <article
      style={{
        padding: "1rem",
        position: "absolute",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        width: "100%",
        bottom: 0,
        gap: "0.5rem",
      }}
    >
      {images.map((_, idx) => (
        <button
          key={idx}
          style={{
            width: "0.75rem",
            height: "0.75rem",
            borderRadius: "50%",
            border: "none",
            backgroundColor: idx === activeImage ? "white" : "black",
          }}
          onClick={() => setActiveImage(idx)}
        ></button>
      ))}
    </article>
  );

  const Thumbnails = (
    <aside
      style={{
        height: "5rem",
        display: "flex",
        justifyContent: "center",
        gap: "1rem",
        flexWrap: "wrap",
      }}
    >
      {images.map((i, index) => (
        <img
          key={index}
          style={{
            width: "5rem",
            height: "5rem",
            borderRadius: "0.25rem",
            objectFit: "cover",
            border: "1px solid  rgba(0,0,0,0.3)",
          }}
          src={i}
          alt={`Image-${index}`}
          onMouseOver={() => setActiveImage(index)}
        />
      ))}
    </aside>
  );

  return (
    <div
      style={{
        height: "100%",
        display: "flex",
        flexDirection: "column",
        gap: "1rem",
        backgroundColor: bgColor,
      }}
    >
      <div
        style={{
          height: "100%",
          display: "flex",
          overflowX: "hidden",
          position: "relative",
        }}
      >
        {images.map((i, index) => (
          <img
            key={index}
            style={{
              width: "100%",
              height: "100%",
              objectFit,
              flex: "none",
              transition: "all 0.3s",
              transform: `translateX(-${activeImage * 100}%)`,
            }}
            src={i}
            onClick={() => onClick && onClick()}
          />
        ))}

        {showNav && NavigationButton}

        {showDots && Dots}
      </div>
      {showThumbnails && Thumbnails}
    </div>
  );
};

export { MyntraCarousel, Slider, StylishCarousel };
