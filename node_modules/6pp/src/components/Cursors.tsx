import { memo, useCallback, useEffect, useRef } from "react";
import { FireBoltPropsType } from "../types/components.types";
import * as React from "react";

export const FireBolt = memo(
  ({
    size = 10,
    color = "black",
    styles,
    zoom = "2",
    mode = "normal",
  }: FireBoltPropsType) => {
    if (size < 1 || size > 40) {
      throw new Error("Size must be between 1 and 40");
    }

    const circles =
      useRef<HTMLCollectionOf<{ x: number; y: number } & HTMLDivElement>>();
    const coordinates = useRef({ x: 0, y: 0 });
    const fireBoltZoomRef = useRef(false);

    const handleMouseMove = (e: MouseEvent) => {
      coordinates.current = {
        x: e.clientX,
        y: e.clientY,
      };

      const target = e.target as HTMLElement;
      const fireboltZoom = target.getAttribute("data-firebolt-zoom");

      fireBoltZoomRef.current = Boolean(fireboltZoom);
    };

    const animateCircles = useCallback(() => {
      let x = coordinates.current.x;
      let y = coordinates.current.y;
      const cursors = circles.current;

      if (!cursors) {
        return;
      }

      Array.from(cursors).forEach((circle, idx) => {
        circle.style.left = `${x - 12}px`;
        circle.style.top = `${y - 12}px`;
        circle.x = x;
        circle.y = y;

        const newSize = (cursors.length - idx) / cursors.length;
        circle.style.scale = newSize.toString();

        const nextCircle = cursors[idx + 1] || cursors[0];

        x += (Number(nextCircle.x || 0) - x) * 0.3;
        y += (Number(nextCircle.y || 0) - y) * 0.3;
        if (idx === 0 && fireBoltZoomRef.current) {
          circle.style.scale = zoom;
        }
      });

      requestAnimationFrame(animateCircles);
    }, []);

    useEffect(() => {
      circles.current = document.getElementsByClassName(
        "6pp-firebolt-Cursor"
      ) as HTMLCollectionOf<{ x: number; y: number } & HTMLDivElement>;

      animateCircles();

      window.addEventListener("mousemove", handleMouseMove);

      return () => {
        window.removeEventListener("mousemove", handleMouseMove);
      };
    }, []);

    return (
      <div
        style={{
          zIndex: "10000",
          mixBlendMode: mode,
          pointerEvents: "none",
        }}
      >
        {Array.from({ length: size }).map((_, i) => (
          <div
            className="6pp-firebolt-Cursor"
            key={i}
            style={{
              position: "fixed",
              height: "24px",
              width: "24px",
              borderRadius: "50%",
              left: 0,
              top: 0,
              backgroundColor: color,
              userSelect: "none",
              pointerEvents: "none",
              transition: "scale 0.2s",
              ...styles,
            }}
          />
        ))}
      </div>
    );
  }
);
