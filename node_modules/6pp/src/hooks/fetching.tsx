import { useState, useEffect } from "react";
import { cache } from "../cache";
// Custom hook for fetching data from API while handling loading and error states and caching the response

const useFetchData = <T,>(
  url: string,
  key: string,
  dependencyProps: (string | number | boolean)[] = []
) => {
  const [data, setData] = useState<T>();
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string>("");
  const [refetchIndex, setRefetchIndex] = useState<number>(0);

  useEffect(() => {
    const controller = new AbortController();

    if (cache.has(key)) {
      setData(JSON.parse(cache.get(key)!));
      return;
    }

    setLoading(true);

    fetch(url, { credentials: "include", signal: controller.signal })
      .then(async (res) => {
        const data = await res.json();

        if (!res.ok) {
          throw new Error(data.message || "Errro while fetching!");
        } else {
          setData(data);
          cache.set(key, JSON.stringify(data));
        }
      })
      .catch((error) => {
        if (error.name !== "AbortError") {
          setError(error.message || "Something went wrong!");
        }
      })
      .finally(() => setLoading(false));

    return () => {
      controller.abort();
    };
  }, [refetchIndex, ...dependencyProps]);

  const refetch = () => {
    cache.delete(key);
    setRefetchIndex((prevIndex) => prevIndex + 1);
  };

  const clearCache = () => {
    cache.delete(key);
  };

  return { data, loading, error, refetch, clearCache };
};

export { useFetchData };
