import { ChangeEvent, useState } from "react";
import { errorMessages } from "../lib/constants";
import {
  isIncludeCapitalLetter,
  isIncludeLowercaseLetter,
  isIncludeNumber,
  isIncludeSpecialChar,
} from "../lib/validators";

type FileHandlerType = "single" | "multiple";

const useFileHandler = <T extends FileHandlerType>(
  type: T,
  limitInMb: number | undefined = 5,
  maxFiles: number | undefined = 10
) => {
  const initialFile = (type === "multiple" ? [] : null) as T extends "multiple"
    ? File[]
    : File | null;

  const initialPreview = (
    type === "multiple" ? [] : null
  ) as T extends "multiple" ? string[] : string | null;

  const [error, setError] = useState<string | null>(null);

  const [file, setFile] =
    useState<T extends "multiple" ? File[] : File | null>(initialFile);

  const [preview, setPreview] =
    useState<T extends "multiple" ? string[] : string | null>(initialPreview);

  const changeHandler = (e: ChangeEvent<HTMLInputElement>) => {
    if (!e.target.files) return;

    if (type === "single") {
      const singleFile = e.target.files[0];

      if (e.target.files.length > 1) {
        return setError(
          "Cannot upload more than 1 file, please select type as 'Multiple'"
        );
      }

      if (singleFile.size > 1024 * 1024 * limitInMb!) {
        return setError("File size too large");
      }
      const reader = new FileReader();

      reader.readAsDataURL(singleFile);
      reader.onloadend = () => {
        setPreview(
          reader.result as T extends "multiple" ? string[] : string | null
        );
      };

      setFile(singleFile as T extends "multiple" ? File[] : File | null);
    }
    if (type === "multiple") {
      const files = Array.from(e.target.files);

      if (maxFiles && files.length > maxFiles) {
        return setError(`Maximum ${maxFiles} files allowed`);
      }

      for (const item of files) {
        if (item.size > 1024 * 1024 * limitInMb!) {
          setError("File size too large");
          return;
        }

        const reader = new FileReader();
        reader.readAsDataURL(item);
        reader.onloadend = () => {
          setPreview((prev) => {
            if (Array.isArray(prev)) {
              return [...prev, reader.result] as T extends "multiple"
                ? string[]
                : string | null;
            } else
              return [reader.result] as T extends "multiple"
                ? string[]
                : string | null;
          });
        };

        setFile((prev) => {
          if (Array.isArray(prev)) {
            return [...prev, item] as T extends "multiple"
              ? File[]
              : File | null;
          } else return [item] as T extends "multiple" ? File[] : File | null;
        });
      }
    }
  };

  const clear = () => {
    setFile(initialFile);
    setPreview(initialPreview);
    setError(null);
  };

  return {
    file,
    preview,
    error,
    changeHandler,
    clear,
  };
};

const useStrongPassword = () => {
  const [error, setError] = useState("");

  const [value, setValue] = useState("");

  const changeHandler = (e: ChangeEvent<HTMLInputElement>) => {
    const val = e.target.value;
    setValue(val);

    const errors = [];

    if (val.length < 8) errors.push(errorMessages.length);
    if (!isIncludeNumber(val)) errors.push(errorMessages.number);
    if (!isIncludeSpecialChar(val)) errors.push(errorMessages.specialChar);
    if (!isIncludeCapitalLetter(val)) errors.push(errorMessages.capitalLetter);
    if (!isIncludeLowercaseLetter(val))
      errors.push(errorMessages.lowercaseLetter);

    setError(
      errors.length > 0
        ? `Password must include ${errors.join(", ")} character`
        : ""
    );
  };

  const clear = () => {
    setValue("");
    setError("");
  };

  return {
    error,
    value,
    changeHandler,
    clear,
  };
};

const useInputValidation = <T extends string | number>(
  initialVal: T,
  validator: (val: T) =>
    | {
        isValid: boolean;
        errorMessage: string;
      }
    | undefined = () => undefined
) => {
  const [value, setValue] = useState<T>(initialVal);
  const [error, setError] = useState("");

  const changeHandler = (e: ChangeEvent<HTMLInputElement>) => {
    let newValue: T;

    if (typeof value === "number") {
      newValue = Number(e.target.value) as T;
    } else {
      newValue = e.target.value as T;
    }

    setValue(newValue);

    const validationResult = validator(newValue as T);
    if (validationResult) {
      setError(validationResult.errorMessage);
    } else {
      setError("");
    }
  };

  const clear = () => {
    setValue(initialVal);
    setError("");
  };

  return {
    value,
    changeHandler,
    error,
    clear,
  };
};

export { useFileHandler, useInputValidation, useStrongPassword };
